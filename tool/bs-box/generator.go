package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	templateHeader   string = "Code generated by go generate using embed tool; DO NOT EDIT."
	blobFileName     string = "blob.go"
	embedFolder      string = "../../static"
	manifestFileName string = "../manifest.go"
)

// Box template

var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package box

// Code generated by go generate using EMBED tool; DO NOT EDIT.

func init() {
	{{- range $name, $file := . }}
    	box.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

// Manifest template

var manifestConv = map[string]interface{}{"conv": manifestfmtByteSlice}
var manifestTmpl = template.Must(template.New("").Funcs(manifestConv).Parse(`package internal

// Code generated by go generate using EMBED tool; DO NOT EDIT.

// const typedhello string = "Hello World"

{{- range $name, $file := . }}
	const {{ conv $name }} string = "{{ $name }}"
{{- end }}`),
)

func manifestfmtByteSlice(s string) string {

	// E.G.
	// "/lang/i18n/lang_en.json"
	// to
	// CONST_lang_i18n_lang_en_json

	// first to be "CONST_"
	res := strings.Replace(s, "/", "CONST_", 1)
	// Replace "/", with "_"
	res = strings.ReplaceAll(res, "/", "_")
	// Replace ".", with "_"
	res = strings.ReplaceAll(res, ".", "_")

	return res
}

func main() {
	// Checking directory with files
	if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
		log.Fatal("Static directory does not exists!")
	}

	// Create map for filenames
	configs := make(map[string][]byte)

	// Walking through embed directory
	err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, embedFolder))

		if info.IsDir() {
			// Skip directories
			log.Println(path, "is a directory, skipping...")
			return nil
		} else {
			// If element is a simple file, embed
			log.Println(path, "is a file, packing in...")

			b, err := ioutil.ReadFile(path)
			if err != nil {
				// If file not reading
				log.Printf("Error reading %s: %s", path, err)
				return err
			}

			// Add file name to map
			configs[relativePath] = b
		}

		return nil
	})
	if err != nil {
		log.Fatal("Error walking through embed directory:", err)
	}

	// Create blob file
	f, err := os.Create(blobFileName)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, configs); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = ioutil.WriteFile(blobFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}

	// MANIFEST

	// Create manifests file
	f, err = os.Create(manifestFileName)
	if err != nil {
		log.Fatal("Error creating manifest file:", err)
	}
	defer f.Close()

	// Create buffer
	builder = &bytes.Buffer{}

	// Execute template
	if err = manifestTmpl.Execute(builder, configs); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err = format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing manifest file
	if err = ioutil.WriteFile(manifestFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing manifest file", err)
	}

}
