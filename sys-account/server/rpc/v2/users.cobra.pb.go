// Code generated by protoc-gen-cobra. DO NOT EDIT.

package rpc

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	proto "github.com/golang/protobuf/proto"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	grpc "google.golang.org/grpc"
	strconv "strconv"
)

func AccountServiceClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("AccountService"),
		Short: "AccountService service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_AccountServiceNewAccountCommand(cfg),
		_AccountServiceGetAccountCommand(cfg),
		_AccountServiceListAccountsCommand(cfg),
		_AccountServiceSearchAccountsCommand(cfg),
		_AccountServiceAssignAccountToRoleCommand(cfg),
		_AccountServiceUpdateAccountCommand(cfg),
		_AccountServiceDisableAccountCommand(cfg),
	)
	return cmd
}

func _AccountServiceNewAccountCommand(cfg *client.Config) *cobra.Command {
	req := &Account{
		Role:   &UserRoles{},
		Fields: &UserDefinedFields{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("NewAccount"),
		Short: "NewAccount RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "NewAccount"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &Account{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.NewAccount(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")
	cmd.PersistentFlags().StringVar(&req.Email, cfg.FlagNamer("Email"), "", "")
	cmd.PersistentFlags().StringVar(&req.Password, cfg.FlagNamer("Password"), "", "")
	_RolesVar(cmd.PersistentFlags(), &req.Role.Role, cfg.FlagNamer("Role Role"), "")
	RoleProject := &Project{}
	cmd.PersistentFlags().StringVar(&RoleProject.Id, cfg.FlagNamer("Role Project Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Project Id"), func() { req.Role.Resource = &UserRoles_Project{Project: RoleProject} })
	RoleOrg := &Org{}
	cmd.PersistentFlags().StringVar(&RoleOrg.Id, cfg.FlagNamer("Role Org Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Org Id"), func() { req.Role.Resource = &UserRoles_Org{Org: RoleOrg} })
	flag.TimestampVar(cmd.PersistentFlags(), &req.CreatedAt, cfg.FlagNamer("CreatedAt"), "")
	flag.TimestampVar(cmd.PersistentFlags(), &req.UpdatedAt, cfg.FlagNamer("UpdatedAt"), "")
	flag.TimestampVar(cmd.PersistentFlags(), &req.LastLogin, cfg.FlagNamer("LastLogin"), "")
	cmd.PersistentFlags().BoolVar(&req.Disabled, cfg.FlagNamer("Disabled"), false, "")

	return cmd
}

func _AccountServiceGetAccountCommand(cfg *client.Config) *cobra.Command {
	req := &GetAccountRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("GetAccount"),
		Short: "GetAccount RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "GetAccount"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &GetAccountRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetAccount(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")

	return cmd
}

func _AccountServiceListAccountsCommand(cfg *client.Config) *cobra.Command {
	req := &ListAccountsRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("ListAccounts"),
		Short: "ListAccounts RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "ListAccounts"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &ListAccountsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.ListAccounts(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().Int64Var(&req.PerPageEntries, cfg.FlagNamer("PerPageEntries"), 0, "limit")
	cmd.PersistentFlags().StringVar(&req.OrderBy, cfg.FlagNamer("OrderBy"), "", "")
	cmd.PersistentFlags().StringVar(&req.CurrentPageToken, cfg.FlagNamer("CurrentPageToken"), "", "number 3 => optional: current_page_token is the last id of the\n (current) listed Accounts for pagination purpose (cursor).")

	return cmd
}

func _AccountServiceSearchAccountsCommand(cfg *client.Config) *cobra.Command {
	req := &SearchAccountsRequest{
		SearchParams: &ListAccountsRequest{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("SearchAccounts"),
		Short: "SearchAccounts RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "SearchAccounts"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &SearchAccountsRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.SearchAccounts(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Query, cfg.FlagNamer("Query"), "", "query can be either email, UserDefinedFields fields")
	cmd.PersistentFlags().Int64Var(&req.SearchParams.PerPageEntries, cfg.FlagNamer("SearchParams PerPageEntries"), 0, "limit")
	cmd.PersistentFlags().StringVar(&req.SearchParams.OrderBy, cfg.FlagNamer("SearchParams OrderBy"), "", "")
	cmd.PersistentFlags().StringVar(&req.SearchParams.CurrentPageToken, cfg.FlagNamer("SearchParams CurrentPageToken"), "", "number 3 => optional: current_page_token is the last id of the\n (current) listed Accounts for pagination purpose (cursor).")

	return cmd
}

func _AccountServiceAssignAccountToRoleCommand(cfg *client.Config) *cobra.Command {
	req := &AssignAccountToRoleRequest{
		Role: &UserRoles{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("AssignAccountToRole"),
		Short: "AssignAccountToRole RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "AssignAccountToRole"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &AssignAccountToRoleRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.AssignAccountToRole(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.AssigneeAccountId, cfg.FlagNamer("AssigneeAccountId"), "", "")
	cmd.PersistentFlags().StringVar(&req.AssignedAccountId, cfg.FlagNamer("AssignedAccountId"), "", "")
	_RolesVar(cmd.PersistentFlags(), &req.Role.Role, cfg.FlagNamer("Role Role"), "")
	RoleProject := &Project{}
	cmd.PersistentFlags().StringVar(&RoleProject.Id, cfg.FlagNamer("Role Project Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Project Id"), func() { req.Role.Resource = &UserRoles_Project{Project: RoleProject} })
	RoleOrg := &Org{}
	cmd.PersistentFlags().StringVar(&RoleOrg.Id, cfg.FlagNamer("Role Org Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Org Id"), func() { req.Role.Resource = &UserRoles_Org{Org: RoleOrg} })

	return cmd
}

func _AccountServiceUpdateAccountCommand(cfg *client.Config) *cobra.Command {
	req := &Account{
		Role:   &UserRoles{},
		Fields: &UserDefinedFields{},
	}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UpdateAccount"),
		Short: "UpdateAccount RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "UpdateAccount"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &Account{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UpdateAccount(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Id, cfg.FlagNamer("Id"), "", "")
	cmd.PersistentFlags().StringVar(&req.Email, cfg.FlagNamer("Email"), "", "")
	cmd.PersistentFlags().StringVar(&req.Password, cfg.FlagNamer("Password"), "", "")
	_RolesVar(cmd.PersistentFlags(), &req.Role.Role, cfg.FlagNamer("Role Role"), "")
	RoleProject := &Project{}
	cmd.PersistentFlags().StringVar(&RoleProject.Id, cfg.FlagNamer("Role Project Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Project Id"), func() { req.Role.Resource = &UserRoles_Project{Project: RoleProject} })
	RoleOrg := &Org{}
	cmd.PersistentFlags().StringVar(&RoleOrg.Id, cfg.FlagNamer("Role Org Id"), "", "")
	flag.WithPostSetHook(cmd.PersistentFlags(), cfg.FlagNamer("Role Org Id"), func() { req.Role.Resource = &UserRoles_Org{Org: RoleOrg} })
	flag.TimestampVar(cmd.PersistentFlags(), &req.CreatedAt, cfg.FlagNamer("CreatedAt"), "")
	flag.TimestampVar(cmd.PersistentFlags(), &req.UpdatedAt, cfg.FlagNamer("UpdatedAt"), "")
	flag.TimestampVar(cmd.PersistentFlags(), &req.LastLogin, cfg.FlagNamer("LastLogin"), "")
	cmd.PersistentFlags().BoolVar(&req.Disabled, cfg.FlagNamer("Disabled"), false, "")

	return cmd
}

func _AccountServiceDisableAccountCommand(cfg *client.Config) *cobra.Command {
	req := &DisableAccountRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("DisableAccount"),
		Short: "DisableAccount RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "AccountService", "DisableAccount"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewAccountServiceClient(cc)
				v := &DisableAccountRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.DisableAccount(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.AccountId, cfg.FlagNamer("AccountId"), "", "")

	return cmd
}

type _RolesValue Roles

func _RolesVar(fs *pflag.FlagSet, p *Roles, name, usage string) {
	fs.Var((*_RolesValue)(p), name, usage)
}

func (v *_RolesValue) Set(val string) error {
	if e, err := parseRoles(val); err != nil {
		return err
	} else {
		*v = _RolesValue(e)
		return nil
	}
}

func (*_RolesValue) Type() string { return "Roles" }

func (v *_RolesValue) String() string { return (Roles)(*v).String() }

func parseRoles(s string) (Roles, error) {
	if i, ok := Roles_value[s]; ok {
		return Roles(i), nil
	} else if i, err := strconv.ParseInt(s, 0, 32); err == nil {
		return Roles(i), nil
	} else {
		return 0, err
	}
}
